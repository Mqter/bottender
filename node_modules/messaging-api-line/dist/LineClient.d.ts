/// <reference types="node" />
import { AxiosInstance } from 'axios';
import { OnRequestFunction } from 'messaging-api-common';
import * as Types from './LineTypes';
export default class LineClient {
    static connect(accessTokenOrConfig: string | Types.ClientConfig, channelSecret?: string): LineClient;
    _channelSecret: string;
    _onRequest: OnRequestFunction | undefined;
    _axios: AxiosInstance;
    _dataAxios: AxiosInstance;
    _accessToken: string;
    constructor(accessTokenOrConfig: string | Types.ClientConfig, channelSecret?: string);
    get axios(): AxiosInstance;
    get dataAxios(): AxiosInstance;
    get accessToken(): string;
    _optionWithoutKeys(option: any, removeKeys: string[]): Record<string, any>;
    /**
     * Reply Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-reply-message
     */
    replyRawBody(body: {
        replyToken: string;
        messages: Types.Message[];
    }, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    reply(replyToken: string, messages: Types.Message[], options?: Record<string, any>): Promise<Types.MutationSuccessResponse>;
    replyMessages(replyToken: string, messages: Types.Message[], options?: Record<string, any>): Promise<Types.MutationSuccessResponse>;
    replyText(replyToken: string, text: string, options?: Types.MessageOptions & {
        emojis?: Types.Emoji[];
    }): Promise<Types.MutationSuccessResponse>;
    replyImage(replyToken: string, image: {
        originalContentUrl: string;
        previewImageUrl?: string;
    }, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    replyVideo(replyToken: string, video: {
        originalContentUrl: string;
        previewImageUrl: string;
    }, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    replyAudio(replyToken: string, audio: {
        originalContentUrl: string;
        duration: number;
    }, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    replyLocation(replyToken: string, location: Types.Location, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    replySticker(replyToken: string, sticker: Omit<Types.StickerMessage, 'type'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Imagemap Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#imagemap-message
     */
    replyImagemap(replyToken: string, altText: string, imagemap: Omit<Types.ImagemapMessage, 'type' | 'altText'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Flex Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#flex-message
     */
    replyFlex(replyToken: string, altText: string, flex: Types.FlexContainer, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Template Messages
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#template-messages
     */
    replyTemplate(replyToken: string, altText: string, template: Types.Template, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    replyButtonTemplate(replyToken: string, altText: string, buttonTemplate: Omit<Types.ButtonsTemplate, 'type'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    replyButtonsTemplate(replyToken: string, altText: string, buttonTemplate: Omit<Types.ButtonsTemplate, 'type'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    replyConfirmTemplate(replyToken: string, altText: string, confirmTemplate: Omit<Types.ConfirmTemplate, 'type'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    replyCarouselTemplate(replyToken: string, altText: string, columns: Types.ColumnObject[], { imageAspectRatio, imageSize, ...options }?: {
        imageAspectRatio?: 'rectangle' | 'square';
        imageSize?: 'cover' | 'contain';
    } & Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    replyImageCarouselTemplate(replyToken: string, altText: string, columns: Types.ImageCarouselColumnObject[], options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Push Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-push-message
     */
    pushRawBody(body: {
        to: string;
        messages: Types.Message[];
    }, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    push(to: string, messages: Types.Message[], options?: Record<string, any>): Promise<Types.MutationSuccessResponse>;
    pushMessages(to: string, messages: Types.Message[], options?: Record<string, any>): Promise<Types.MutationSuccessResponse>;
    pushText(to: string, text: string, options?: Types.MessageOptions & {
        emojis?: Types.Emoji[];
    }): Promise<Types.MutationSuccessResponse>;
    pushImage(to: string, image: {
        originalContentUrl: string;
        previewImageUrl?: string;
    }, options: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    pushVideo(to: string, video: {
        originalContentUrl: string;
        previewImageUrl: string;
    }, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    pushAudio(to: string, audio: {
        originalContentUrl: string;
        duration: number;
    }, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    pushLocation(to: string, location: Types.Location, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    pushSticker(to: string, sticker: Omit<Types.StickerMessage, 'type'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Imagemap Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#imagemap-message
     */
    pushImagemap(to: string, altText: string, imagemap: Omit<Types.ImagemapMessage, 'type' | 'altText'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Flex Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#flex-message
     */
    pushFlex(to: string, altText: string, flex: Types.FlexContainer, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Template Messages
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#template-messages
     */
    pushTemplate(to: string, altText: string, template: Types.Template, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    pushButtonTemplate(to: string, altText: string, buttonTemplate: Omit<Types.ButtonsTemplate, 'type'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    pushButtonsTemplate(to: string, altText: string, buttonTemplate: Omit<Types.ButtonsTemplate, 'type'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    pushConfirmTemplate(to: string, altText: string, confirmTemplate: Omit<Types.ConfirmTemplate, 'type'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    pushCarouselTemplate(to: string, altText: string, columns: Types.ColumnObject[], { imageAspectRatio, imageSize, ...options }?: {
        imageAspectRatio?: 'rectangle' | 'square';
        imageSize?: 'cover' | 'contain';
    } & Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    pushImageCarouselTemplate(to: string, altText: string, columns: Types.ImageCarouselColumnObject[], options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Multicast
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-multicast-messages
     */
    multicastRawBody(body: {
        to: string[];
        messages: Types.Message[];
    }, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    multicast(to: string[], messages: Types.Message[], options?: Record<string, any>): Promise<Types.MutationSuccessResponse>;
    multicastMessages(to: string[], messages: Types.Message[], options?: Record<string, any>): Promise<Types.MutationSuccessResponse>;
    multicastText(to: string[], text: string, options?: Types.MessageOptions & {
        emojis?: Types.Emoji[];
    }): Promise<Types.MutationSuccessResponse>;
    multicastImage(to: string[], image: {
        originalContentUrl: string;
        previewImageUrl?: string;
    }, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    multicastVideo(to: string[], video: {
        originalContentUrl: string;
        previewImageUrl: string;
    }, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    multicastAudio(to: string[], audio: {
        originalContentUrl: string;
        duration: number;
    }, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    multicastLocation(to: string[], location: Types.Location, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    multicastSticker(to: string[], sticker: Omit<Types.StickerMessage, 'type'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Imagemap Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#imagemap-message
     */
    multicastImagemap(to: string[], altText: string, imagemap: Omit<Types.ImagemapMessage, 'type' | 'altText'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Flex Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#flex-message
     */
    multicastFlex(to: string[], altText: string, flex: Types.FlexContainer, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Template Messages
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#template-messages
     */
    multicastTemplate(to: string[], altText: string, template: Types.Template, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    multicastButtonTemplate(to: string[], altText: string, buttonTemplate: Omit<Types.ButtonsTemplate, 'type'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    multicastButtonsTemplate(to: string[], altText: string, buttonTemplate: Omit<Types.ButtonsTemplate, 'type'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    multicastConfirmTemplate(to: string[], altText: string, confirmTemplate: Omit<Types.ConfirmTemplate, 'type'>, options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    multicastCarouselTemplate(to: string[], altText: string, columns: Types.ColumnObject[], { imageAspectRatio, imageSize, ...options }?: {
        imageAspectRatio?: 'rectangle' | 'square';
        imageSize?: 'cover' | 'contain';
    } & Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    multicastImageCarouselTemplate(to: string[], altText: string, columns: Types.ImageCarouselColumnObject[], options?: Types.MessageOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Content
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-content
     */
    getMessageContent(messageId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Buffer>;
    retrieveMessageContent(messageId: string, options?: Types.AccessTokenOptions): Promise<Buffer>;
    /**
     * Get User Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-profile
     * displayName, userId, pictureUrl, statusMessage
     */
    getUserProfile(userId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.User>;
    /**
     * Get Group Member Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-group-member-profile
     */
    getGroupMemberProfile(groupId: string, userId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<any>;
    /**
     * Get Room Member Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-room-member-profile
     */
    getRoomMemberProfile(roomId: string, userId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<any>;
    /**
     * Get Group Member IDs
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-group-member-user-ids
     */
    getGroupMemberIds(groupId: string, start?: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        memberIds: string[];
        next?: string;
    }>;
    getAllGroupMemberIds(groupId: string, options?: Record<string, any>): Promise<string[]>;
    /**
     * Get Room Member IDs
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-room-member-user-ids
     */
    getRoomMemberIds(roomId: string, start?: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        memberIds: string[];
        next?: string;
    }>;
    getAllRoomMemberIds(roomId: string, options?: Record<string, any>): Promise<string[]>;
    /**
     * Leave Group
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#leave-group
     */
    leaveGroup(groupId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Leave Room
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#leave-room
     */
    leaveRoom(roomId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Rich Menu
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#rich-menu
     */
    getRichMenuList({ accessToken: customAccessToken, }?: Types.AccessTokenOptions): Promise<any>;
    getRichMenu(richMenuId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<any>;
    createRichMenu(richMenu: Types.RichMenu, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<any>;
    deleteRichMenu(richMenuId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<any>;
    getLinkedRichMenu(userId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<any>;
    linkRichMenu(userId: string, richMenuId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<any>;
    unlinkRichMenu(userId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<any>;
    getDefaultRichMenu({ accessToken: customAccessToken, }?: Types.AccessTokenOptions): Promise<any>;
    setDefaultRichMenu(richMenuId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<any>;
    deleteDefaultRichMenu({ accessToken: customAccessToken, }?: Types.AccessTokenOptions): Promise<any>;
    /**
     * - Images must have one of the following resolutions: 2500x1686, 2500x843.
     * - You cannot replace an image attached to a rich menu.
     *   To update your rich menu image, create a new rich menu object and upload another image.
     */
    uploadRichMenuImage(richMenuId: string, image: Buffer, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<any>;
    downloadRichMenuImage(richMenuId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Buffer | null>;
    /**
     * Account link
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#account-link
     */
    issueLinkToken(userId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        linkToken: string;
    }>;
    getLinkToken(userId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<string>;
    /**
     * LINE Front-end Framework (LIFF)
     *
     * https://developers.line.me/en/docs/liff/reference/#add-liff-app
     */
    getLiffAppList({ accessToken: customAccessToken, }?: Types.AccessTokenOptions): Promise<{
        liffId: string;
        view: Types.LiffView;
    }>;
    createLiffApp(view: Types.LiffView, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        liffId: string;
    }>;
    updateLiffApp(liffId: string, view: Types.LiffView, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<void>;
    deleteLiffApp(liffId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<void>;
    /**
     * Get number of messages sent
     *
     */
    getTargetLimitForAdditionalMessages({ accessToken: customAccessToken, }?: Types.AccessTokenOptions): Promise<Types.TargetLimitForAdditionalMessages>;
    getNumberOfMessagesSentThisMonth({ accessToken: customAccessToken, }?: Types.AccessTokenOptions): Promise<Types.NumberOfMessagesSentThisMonth>;
    getNumberOfSentReplyMessages(date: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.NumberOfMessagesSentResponse>;
    getNumberOfSentPushMessages(date: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.NumberOfMessagesSentResponse>;
    getNumberOfSentMulticastMessages(date: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.NumberOfMessagesSentResponse>;
    getNumberOfSentBroadcastMessages(date: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.NumberOfMessagesSentResponse>;
    /**
     * Insight
     *
     */
    getNumberOfMessageDeliveries(date: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.NumberOfMessageDeliveriesResponse>;
    getNumberOfFollowers(date: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.NumberOfFollowersResponse>;
    getFriendDemographics({ accessToken: customAccessToken, }?: Types.AccessTokenOptions): Promise<Types.FriendDemographics>;
    /**
     * Narrowcast Message
     *
     * https://developers.line.biz/en/reference/messaging-api/#send-narrowcast-message
     */
    narrowcastRawBody(body: {
        messages: Types.Message[];
        recipient?: Types.RecipientObject;
        filter?: {
            demographic: Types.DemographicFilterObject;
        };
        limit?: {
            max: number;
        };
    }, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    narrowcast(messages: Types.Message[], options?: Types.NarrowcastOptions): Promise<Types.MutationSuccessResponse>;
    narrowcastMessages(messages: Types.Message[], options?: Types.NarrowcastOptions): Promise<Types.MutationSuccessResponse>;
    getNarrowcastProgress(requestId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.NarrowcastProgressResponse>;
    /**
     * Audience
     *
     */
    createUploadAudienceGroup(description: string, isIfaAudience: boolean, audiences: Types.Audience[], options?: Types.CreateUploadAudienceGroupOptions): Promise<Types.UploadAudienceGroup>;
    /**
     * Adds new user IDs or IFAs to an audience for uploading user IDs.
     *
     * - https://developers.line.biz/en/reference/messaging-api/#update-upload-audience-group
     */
    updateUploadAudienceGroup(audienceGroupId: number, audiences: Types.Audience[], options?: Types.UpdateUploadAudienceGroupOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Creates an audience for click-based retargeting. You can create up to 1,000 audiences.
     * A click-based retargeting audience is a collection of users who have clicked a URL contained in a broadcast or narrowcast message.
     * Use a request ID to identify the message. The message is sent to any user who has clicked at least one link.
     *
     * - https://developers.line.biz/en/reference/messaging-api/#create-click-audience-group
     */
    createClickAudienceGroup(description: string, requestId: string, options?: Types.CreateClickAudienceGroupOptions): Promise<Types.ClickAudienceGroup>;
    /**
     * Creates an audience for impression-based retargeting. You can create up to 1,000 audiences.
     * An impression-based retargeting audience is a collection of users who have viewed a broadcast or narrowcast message.
     * Use a request ID to specify the message. The audience will include any user who has viewed at least one message bubble.
     *
     * - https://developers.line.biz/en/reference/messaging-api/#create-imp-audience-group
     */
    createImpAudienceGroup(description: string, requestId: string, options?: Types.AccessTokenOptions): Promise<Types.ImpAudienceGroup>;
    /**
     * Renames an existing audience.
     *
     * - https://developers.line.biz/en/reference/messaging-api/#set-description-audience-group
     */
    setDescriptionAudienceGroup(description: string, audienceGroupId: number, options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Deletes an audience.
     *
     * - https://developers.line.biz/en/reference/messaging-api/#delete-audience-group
     */
    deleteAudienceGroup(audienceGroupId: number, options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Gets audience data.
     *
     * - https://developers.line.biz/en/reference/messaging-api/#get-audience-group
     */
    getAudienceGroup(audienceGroupId: number, options?: Types.AccessTokenOptions): Promise<Types.AudienceGroupWithJob>;
    /**
     * Gets data for more than one audience.
     *
     * - https://developers.line.biz/en/reference/messaging-api/#get-audience-groups
     */
    getAudienceGroups(options?: Types.GetAudienceGroupsOptions): Promise<Types.AudienceGroups>;
    /**
     * オーディエンスの権限レベルを取得します。
     *
     * - https://developers.line.biz/en/reference/messaging-api/#get-authority-level
     */
    getAudienceGroupAuthorityLevel(options?: Types.AccessTokenOptions): Promise<Types.AudienceGroupAuthorityLevel>;
    /**
     * 同じチャネルで作成された、すべてのオーディエンスの権限レベルを変更します。
     *
     * - https://developers.line.biz/en/reference/messaging-api/#change-authority-level
     */
    changeAudienceGroupAuthorityLevel(authorityLevel: 'PUBLIC' | 'PRIVATE', options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
}
//# sourceMappingURL=LineClient.d.ts.map